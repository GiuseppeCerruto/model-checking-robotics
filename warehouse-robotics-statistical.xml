<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int N = 12;
const int M = 16;
const int P = 30;
const int K = 1;
const int MAX_T = 10;
const int queue_column = N-1; // line where robots queue for the delivery point
const int wait_column = 0;    // line where robots without a task rests
const int pick_column = N-4; // line where robots travel to reach the desidered pods line in order to pick a pod
const int delivery_column = N-3; // line where robots travel to reach the desidered pods line in order to deliver a pod
const int new_task_column = wait_column + 1;

int freePods = P;
int head=0;
int tail=0;
int queue_length=0;

typedef struct {
    bool isRobotOn;
} Square;

Square matrix[M][N]; 

typedef struct{
    int x;
    int y;
} Position;
 
Position delivery = {11,0};
Position entry = {9,15};

typedef struct {
    int y;
    int x;
    bool assigned;
} Pod;

Pod pods[P];

typedef struct{
    Pod pod;
    int id;
} Task;

Task tasks[MAX_T];

urgent broadcast chan pick, release; 
broadcast chan claim;

void initAll(){
    
    int i, x, y;

    for(i=0, x=2, y=1; i&lt;P; i++){
        pods[i].assigned=false;
        pods[i].x=x;
        pods[i].y=y;
        x++;
        if(x==8){
            x=2;
            y=y+3;
        } 
    }
}


const double PI = 3.14159265358979323846;

double stdNormal () { // N(0, 1)
    return sqrt ( -2* ln (1- random (1))) * cos (2* PI* random (1));
}

double Normal ( double mean , double stdDev ) {
    return mean + stdDev * stdNormal ();
}

double Exponential(double lambda ){
    return -(1/lambda)*ln(1-random(1));
}



</declaration>
	<template>
		<name>TaskDispatcher</name>
		<parameter>double mu_T, double sigma_T</parameter>
		<declaration>clock x;
double delay;

double normal_delay() { 
    return Normal (mu_T , sigma_T);
}

int fint_fixed(double x) {
    int y=0;
    while(y&lt;x) 
        y++;
    return y;

}

Task create_task(){
    double rand;
    int i;
    bool flag=false;
    Task t;
    do {
        rand=random(P-1);
        i= fint_fixed(rand); 
        if(pods[i].assigned==false){
            flag=true;
            pods[i].assigned=true;
        }
    } while(!flag);
    t.pod=pods[i];
    t.id = i;
    freePods--;
    return t;
}

void enqueue(){
    queue_length++;
    tasks[tail]=create_task();
    tail=(tail+1)%MAX_T;
}
</declaration>
		<location id="id0" x="-1921" y="-365">
			<name x="-1972" y="-416">dispatcher_normal</name>
			<label kind="invariant" x="-1938" y="-399">x&lt;=delay</label>
		</location>
		<location id="id1" x="-1377" y="-331">
			<name x="-1387" y="-365">Overflow</name>
			<urgent/>
		</location>
		<location id="id2" x="-2286" y="-187">
			<name x="-2296" y="-221">Initial</name>
			<label kind="invariant" x="-2296" y="-170">x&lt;=0</label>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-2235" y="-484">x&gt;=delay &amp;&amp; queue_length&lt;MAX_T</label>
			<label kind="assignment" x="-2235" y="-459">x=0, enqueue(), delay=normal_delay()</label>
			<nail x="-2227" y="-433"/>
			<nail x="-2227" y="-314"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="assignment" x="-2184" y="-229">initAll(), delay=normal_delay(), x=0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="assignment" x="-1615" y="-264">x=0, delay=normal_delay()</label>
			<nail x="-1599" y="-272"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-1827" y="-382">x&gt;=delay &amp;&amp; (queue_length==MAX_T || freePods== 0)</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Robot</name>
		<parameter>double lambda</parameter>
		<declaration>// Place local declarations here.

clock t,d;
double delay;

bool arrived_pod, arrived_delivery, arrived_back, repositioned;
int x = 9; 
int y = 15;
Task myTask;

double exponential_delay() { 
    return Exponential(lambda);
}

void claimTask() {
    myTask = tasks[head];
    arrived_pod = false;
    arrived_delivery = false;
    arrived_back = false;
    repositioned=false;
    queue_length--;
    head=(head+1)%MAX_T;
}

void freePod() {
    pods[myTask.id].assigned = false;
    freePods++;
}

bool isFree(int x, int y) {

    return !matrix[y][x].isRobotOn;

}

void move(int h, int v){
    matrix[y][x].isRobotOn=false;
    x+=h;
    y+=v;
    matrix[y][x].isRobotOn=true;
}


void move_up(){
    if(y&gt;0 &amp;&amp; isFree(x,y-1)){
        move(0,-1);
    }
}

 
void move_down(){
    if(y&lt;M-1 &amp;&amp; isFree(x,y+1)){
        move(0,1);
    }
}

 

void move_left(){
    if(x&gt;0 &amp;&amp; isFree(x-1,y)){
        move(-1,0);
    }
}

 

void move_right(){
    if(x&lt; N-1 &amp;&amp; isFree(x+1,y)){
        move(1,0);    
    }
}


void next_step_to_pod() {

    if (x == pick_column &amp;&amp; y &gt; myTask.pod.y) {    //robot is in pick row and needs to reach the pod's line
        move_up();         
    } else if (y == myTask.pod.y &amp;&amp; x &gt;= myTask.pod.x) { //robot is in pod's line
            if (x != myTask.pod.x) { //not reached pod yet
                move_left();
            }
    } else if (y == myTask.pod.y &amp;&amp; x &lt; myTask.pod.x &amp;&amp; x &gt; new_task_column) {
            move_left();
    } else if (x == new_task_column &amp;&amp; y != M-1) {
            move_down();
    } else if (x == wait_column) {
            move_right();
    } else if (y == M-1) {
        if (x &lt; pick_column) {
            move_right();
        } else if (x &gt; pick_column) {
            move_left();
        }
    }

    if (x == myTask.pod.x &amp;&amp; y == myTask.pod.y) {
        arrived_pod = true;
    }
}


void next_step_to_delivery() {

    if( x==myTask.pod.x &amp;&amp; y==myTask.pod.y ){ //robot is taking the Pod
        move_down();
    } else if( x==queue_column ){  //robot is on the delivery column
        move_up();
    } else if( x&lt;queue_column-1 ){
        move_right();         
    } else if( x==queue_column-1 &amp;&amp; isFree(queue_column,y)){
        move_right();
    } else {
        move_down();
    }
        

    if(x==delivery.x &amp;&amp; y==delivery.y ){
        arrived_delivery=true;
        return;
    }   
}

void next_step_to_return() {
    //da delivery, spostamento a sx per raggiungere la colonna N-3
    if( y==0 &amp;&amp; x!=delivery_column){
        move_left();
    } else if( x==delivery_column &amp;&amp; y!=myTask.pod.y - 1){ //da delivery row , spostamento in basso per raggiungere la riga pod +1 
        move_down();
    } else if(y==myTask.pod.y-1 &amp;&amp; x!=myTask.pod.x ){ //da riga pod + 1  , spostamento a sx per raggiungere la colonna pod 
        move_left();
    } else if(y==myTask.pod.y-1 &amp;&amp; x==myTask.pod.x ){ //da riga pod + 1  e colonna del pod, spostamento in basso per consegnare il pod
        if(isFree(x,y+1)){
            move_down();
            arrived_back = true;
        }
    }
}

void next_step_to_reposition(){
    if(x!=1){
        move_left();
    } else if(x==1 &amp;&amp; isFree(x-1,y)){
            move_left();
            repositioned=true;
    } else if(y!=M-1 &amp;&amp; isFree(x,y+1)){
          move_down();
        }
    
}
</declaration>
		<location id="id3" x="-3068" y="-816">
			<name x="-3162" y="-841">waitingTask</name>
			<label kind="invariant" x="-3136" y="-858">t&lt;delay</label>
		</location>
		<location id="id4" x="-2720" y="-654">
			<name x="-2822" y="-654">getting_pod</name>
			<label kind="invariant" x="-2788" y="-671">t&lt;=K</label>
		</location>
		<location id="id5" x="-2363" y="-654">
			<name x="-2465" y="-629">reaching_delivery</name>
			<label kind="invariant" x="-2439" y="-612">t&lt;=K</label>
		</location>
		<location id="id6" x="-2533" y="-867">
			<name x="-2543" y="-901">waiting_release</name>
		</location>
		<location id="id7" x="-2677" y="-850">
			<name x="-2687" y="-884">returning_pod</name>
			<label kind="invariant" x="-2686" y="-901">t&lt;=K</label>
		</location>
		<location id="id8" x="-2363" y="-731">
			<name x="-2346" y="-739">waiting_human</name>
		</location>
		<location id="id9" x="-2924" y="-960">
			<name x="-2890" y="-977">repositioning</name>
			<label kind="invariant" x="-2881" y="-994">t&lt;=K &amp;&amp; d&lt;delay</label>
		</location>
		<location id="id10" x="-3213" y="-688">
			<name x="-3223" y="-722">start</name>
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id9"/>
			<target ref="id9"/>
			<label kind="guard" x="-2881" y="-1079">d&gt;=delay &amp;&amp; queue_length==0 &amp;&amp; repositioned==false &amp;&amp; t&gt;=K</label>
			<label kind="assignment" x="-2864" y="-1062">d=0,t=0,next_step_to_reposition(),delay=exponential_delay()</label>
			<nail x="-2932" y="-1079"/>
			<nail x="-2873" y="-1054"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id9"/>
			<label kind="guard" x="-2975" y="-1139">d&gt;=delay &amp;&amp; queue_length==0 &amp;&amp; repositioned==false &amp;&amp; t&lt;=K</label>
			<label kind="assignment" x="-2975" y="-1122">d=0,delay=exponential_delay()</label>
			<nail x="-2983" y="-1113"/>
			<nail x="-3043" y="-1105"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="-3442" y="-858">t&gt;=delay &amp;&amp; queue_length==0</label>
			<label kind="assignment" x="-3442" y="-841">delay=exponential_delay(),t=0</label>
			<nail x="-3051" y="-884"/>
			<nail x="-3221" y="-875"/>
			<nail x="-3170" y="-799"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id3"/>
			<label kind="assignment" x="-3391" y="-748">delay=exponential_delay(),t=0</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id4"/>
			<label kind="guard" x="-2966" y="-858">queue_length&gt;0 &amp;&amp; d&gt;=delay</label>
			<label kind="synchronisation" x="-2966" y="-841">claim!</label>
			<label kind="assignment" x="-2966" y="-824">claimTask(), t=0</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id9"/>
			<label kind="guard" x="-3315" y="-1019">t&gt;=K &amp;&amp; d&lt;=delay &amp;&amp;repositioned==false</label>
			<label kind="assignment" x="-3255" y="-1002">t=0, next_step_to_reposition()</label>
			<nail x="-3000" y="-986"/>
			<nail x="-3051" y="-977"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id3"/>
			<label kind="guard" x="-3111" y="-952">repositioned==true</label>
			<label kind="assignment" x="-3187" y="-935">delay=exponential_delay(),t=0</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id9"/>
			<label kind="guard" x="-2847" y="-952">arrived_back==true</label>
			<label kind="assignment" x="-2822" y="-935">freePod(), t=0, delay=exponential_delay(),d=0</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-2439" y="-816">pick!</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id8"/>
			<label kind="guard" x="-2354" y="-697">arrived_delivery==true</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="guard" x="-2720" y="-773">t&gt;=K &amp;&amp; arrived_back==false</label>
			<label kind="assignment" x="-2711" y="-756">next_step_to_return(), t=0</label>
			<nail x="-2703" y="-799"/>
			<nail x="-2643" y="-773"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-2626" y="-850">release?</label>
			<label kind="assignment" x="-2618" y="-833">t=0</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="guard" x="-2235" y="-612">t&gt;=K &amp;&amp; arrived_delivery==false</label>
			<label kind="assignment" x="-2235" y="-595">next_step_to_delivery(), t=0</label>
			<nail x="-2235" y="-552"/>
			<nail x="-2252" y="-646"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-2643" y="-629">arrived_pod==true</label>
			<label kind="assignment" x="-2609" y="-646">t=0</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="guard" x="-2746" y="-552">t&gt;=K &amp;&amp; arrived_pod==false</label>
			<label kind="assignment" x="-2745" y="-569">next_step_to_pod(), t=0</label>
			<nail x="-2746" y="-586"/>
			<nail x="-2669" y="-578"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-3085" y="-722">queue_length &gt; 0 &amp;&amp; t&gt;=delay</label>
			<label kind="synchronisation" x="-3060" y="-756">claim!</label>
			<label kind="assignment" x="-3060" y="-739">claimTask(), t=0</label>
		</transition>
	</template>
	<template>
		<name>Human</name>
		<parameter>double mu_H, double sigma_H</parameter>
		<declaration>clock x;
double delay;

double normal_delay() {
    return Normal (mu_H , sigma_H);
}</declaration>
		<location id="id11" x="-450" y="-204">
			<name x="-460" y="-238">idle</name>
		</location>
		<location id="id12" x="-365" y="-25">
			<name x="-373" y="-8">picking</name>
			<label kind="invariant" x="-374" y="9">x&lt;=delay</label>
		</location>
		<location id="id13" x="-221" y="-93">
			<name x="-231" y="-127">done</name>
		</location>
		<init ref="id11"/>
		<transition>
			<source ref="id13"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-348" y="-178">release!</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="-263" y="-68">x&gt;=delay</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-459" y="-119">pick?</label>
			<label kind="assignment" x="-603" y="-93">x=0, delay=normal_delay()</label>
			<nail x="-451" y="-195"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
robots(int[0,3] i) = Robot(1);
human = Human(10.0, 1.0);
//dispatcher = TaskDispatcher(90); // non soddisfa la prorpietà, cioè non va in overflow
dispatcher = TaskDispatcher(90.0, 2.0); // soddisfa la proprietà, cioè va in overflow
// List one or more processes to be composed into a system.
system robots, dispatcher, human;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[&lt;=1000](&lt;&gt; dispatcher.Overflow)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; dispatcher.Overflow</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
