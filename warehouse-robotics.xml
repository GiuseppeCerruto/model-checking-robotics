<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int N = 10;
const int M = 10;
const int P = 20;
const int K = 1;
const int MAX_T=10;

int head=0;
int tail=0;
int queue_length=0;

typedef struct {
bool isPodOn;
bool isRobotOn;
bool isEntry;
bool isDelivery;
bool will_be_occupied;
} Square;

Square matrix[N][M]; 


typedef struct {
int x;
int y;
bool assigned;
} Pod;

Pod pods[P];

typedef struct{
Pod pod;
} Task;

Task tasks[MAX_T];

chan pick, release, claim;</declaration>
	<template>
		<name>TaskDispatcher</name>
		<parameter>int T</parameter>
		<declaration>clock x;

int fint_test(double x) {
    int y=0;
    while(y&lt;x) y++;
    return y;
}

Task create_task(){
    double rand;
    int i;
    bool flag=false;
    Task t;
    do {
        rand=random(P-1);
        i= fint_test(rand); 
        if(pods[i].assigned==false){
            flag=true;
            pods[i].assigned=true;
        }
    } while(!flag);
    t.pod=pods[i];
    return t;
}

void enqueue(){
    queue_length++;
    tasks[tail]=create_task();
    tail=(tail+1)%MAX_T;
}
</declaration>
		<location id="id0" x="-1836" y="-374">
			<name x="-1998" y="-391">dispatcher_normal</name>
			<label kind="invariant" x="-1844" y="-348">x&lt;=T</label>
		</location>
		<location id="id1" x="-1513" y="-349">
			<name x="-1523" y="-383">Overflow</name>
			<urgent/>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-2023" y="-263">claim?</label>
			<nail x="-2022" y="-314"/>
			<nail x="-1912" y="-221"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="assignment" x="-1615" y="-264">x=0</label>
			<nail x="-1599" y="-272"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-1777" y="-391">x==T &amp;&amp; queue_length==MAX_T</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-1768" y="-493">x==T &amp;&amp; queue_length&lt;MAX_T</label>
			<label kind="assignment" x="-1726" y="-476">enqueue(), x=0</label>
			<nail x="-1785" y="-467"/>
			<nail x="-1734" y="-467"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Robot</name>
		<declaration>// Place local declarations here.

clock t;
bool arrived_pod, arrived_delivery, arrived_back;
int x,y;
Task myTask;

void claimTask() {
    myTask = tasks[head];
    arrived_pod = false;
    arrived_delivery = false;
    queue_length--;
    head=(head+1)%MAX_T;
}

void next_step(int x, int y) {

}

void next_step_to_pod() {
    //arrived_pod = true;
    next_step(myTask.pod.x, myTask.pod.y);

}

void next_step_to_delivery() {
    //arrived_delivery = true;
    //next_step();

}

void next_step_to_return() {
    //arrived_back = true;
    next_step(myTask.pod.x, myTask.pod.y);

}
</declaration>
		<location id="id2" x="-2975" y="-833">
			<name x="-3018" y="-867">waiting_task</name>
			<label kind="invariant" x="-3136" y="-824">queue_length == 0</label>
		</location>
		<location id="id3" x="-2720" y="-654">
			<name x="-2822" y="-654">getting_pod</name>
			<label kind="invariant" x="-2788" y="-671">t&lt;=K</label>
		</location>
		<location id="id4" x="-2439" y="-714">
			<name x="-2439" y="-748">reaching_delivery</name>
		</location>
		<location id="id5" x="-2533" y="-867">
			<name x="-2543" y="-901">waiting_release</name>
		</location>
		<location id="id6" x="-2677" y="-850">
			<name x="-2687" y="-884">returning_pod</name>
			<label kind="invariant" x="-2703" y="-901">t&lt;=K</label>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="guard" x="-2881" y="-867">arrived_back==true</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="guard" x="-2720" y="-773">t&gt;=K &amp;&amp; arrived_back==false</label>
			<label kind="assignment" x="-2711" y="-756">next_step_to_return(), t=0</label>
			<nail x="-2703" y="-799"/>
			<nail x="-2643" y="-773"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-2626" y="-850">release?</label>
			<label kind="assignment" x="-2618" y="-833">t=0</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-2482" y="-833">arrived_delivery==true</label>
			<label kind="synchronisation" x="-2482" y="-816">pick!</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="guard" x="-2311" y="-672">t&gt;=K &amp;&amp; arrived_delivery==false</label>
			<label kind="assignment" x="-2311" y="-655">next_step_to_delivery(), t=0</label>
			<nail x="-2311" y="-612"/>
			<nail x="-2328" y="-706"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-2644" y="-663">arrived_pod==true</label>
			<label kind="assignment" x="-2610" y="-680">t=0</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="-2746" y="-552">t&gt;=K &amp;&amp; arrived_pod==false</label>
			<label kind="assignment" x="-2746" y="-569">next_step_to_pod(), t=0</label>
			<nail x="-2746" y="-586"/>
			<nail x="-2669" y="-578"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-2966" y="-739">queue_length &gt; 0</label>
			<label kind="assignment" x="-2966" y="-722">claimTask(), t=0</label>
		</transition>
	</template>
	<template>
		<name>Human</name>
		<parameter>int H</parameter>
		<declaration>clock x;
</declaration>
		<location id="id7" x="-450" y="-204">
			<name x="-460" y="-238">idle</name>
		</location>
		<location id="id8" x="-289" y="-85">
			<name x="-297" y="-68">picking</name>
			<label kind="invariant" x="-263" y="-93">x&lt;=H</label>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-307" y="-174">x&gt;=H</label>
			<label kind="synchronisation" x="-314" y="-195">release!</label>
			<nail x="-316" y="-174"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-433" y="-68">pick?</label>
			<label kind="assignment" x="-433" y="-85">x=0</label>
			<nail x="-399" y="-93"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
robot = Robot();
human = Human(10);
dispatcher = TaskDispatcher(5);
// List one or more processes to be composed into a system.
system robot, dispatcher, human;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; dispatcher.Overflow</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
