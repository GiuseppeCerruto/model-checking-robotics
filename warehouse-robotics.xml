<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int N = 12;
const int M = 16;
const int P = 20;
const int K = 1;
const int MAX_T = 10;
const int DeliveryColumn = N-1; // line where robots queue for the delivery point
const int wait_row = 0;    // line where robots without a task rests
const int pick_row = N-4; // line where robots travel to reach the desidered pods line in order to pick a pod
const int delivery_row = N-3; // line where robots travel to reach the desidered pods line in order to deliver a pod
const int new_task_row = wait_row + 1;

int freePods = P;
int head=0;
int tail=0;
int queue_length=0;

typedef struct {
    bool isRobotOn;
} Square;

Square matrix[N][M]; 

typedef struct{
int x;
int y;
} Position;
 
Position delivery;
Position entry;

typedef struct {
    int x;
    int y;
    bool assigned;
} Pod;

Pod pods[P];

typedef struct{
    Pod pod;
    int id;
} Task;

Task tasks[MAX_T];

urgent chan pick, release, claim;






</declaration>
	<template>
		<name>TaskDispatcher</name>
		<parameter>int T</parameter>
		<declaration>clock x;

int fint_test(double x) {
    int y=0;
    while(y&lt;x) y++;
    return y;
}

Task create_task(){
    double rand;
    int i;
    bool flag=false;
    Task t;
    do {
        rand=random(P-1);
        i= fint_test(rand); 
        if(pods[i].assigned==false){
            flag=true;
            pods[i].assigned=true;
        }
    } while(!flag);
    t.pod=pods[i];
    t.id = i;
    freePods--;
    return t;
}

void dequeue() {
    queue_length--;
    head=(head+1)%MAX_T;
}

void enqueue(){
    queue_length++;
    tasks[tail]=create_task();
    tail=(tail+1)%MAX_T;
}
</declaration>
		<location id="id0" x="-1921" y="-365">
			<name x="-1972" y="-416">dispatcher_normal</name>
			<label kind="invariant" x="-1938" y="-399">x&lt;=T</label>
		</location>
		<location id="id1" x="-1377" y="-331">
			<name x="-1387" y="-365">Overflow</name>
			<urgent/>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-1955" y="-204">claim?</label>
			<label kind="assignment" x="-1955" y="-187">dequeue()</label>
			<nail x="-1836" y="-212"/>
			<nail x="-1997" y="-212"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-2150" y="-459">x&gt;=T &amp;&amp; queue_length&lt;MAX_T</label>
			<label kind="assignment" x="-2150" y="-442">x=0, enqueue()</label>
			<nail x="-2133" y="-416"/>
			<nail x="-2133" y="-306"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="assignment" x="-1615" y="-264">x=0</label>
			<nail x="-1599" y="-272"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-1827" y="-382">x&gt;=T &amp;&amp; (queue_length==MAX_T || freePods== 0)</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Robot</name>
		<declaration>// Place local declarations here.

clock t;

bool arrived_pod, arrived_delivery, arrived_back, repositioned;
int x,y;
Task myTask;

void claimTask() {
    myTask = tasks[head];
    arrived_pod = false;
    arrived_delivery = false;
    arrived_back = false;
    repositioned=false;
}

void freePod() {
    pods[myTask.id].assigned = false;
    freePods++;
}

void next_step(int x, int y) {

}

void next_step_to_pod() {
    arrived_pod = true;
    //next_step(myTask.pod.x, myTask.pod.y);

}

void next_step_to_delivery() {
    arrived_delivery = true;
    //next_step();

}

void next_step_to_return() {
    //da delivery, spostamento a sx per raggiungere la colonna N-3
    if( y==0 &amp;&amp; x!=delivery_row){
        if(matrix[y][x-1].isRobotOn=false){
            matrix[y][x-1].isRobotOn=true;
            matrix[y][x].isRobotOn=false;
            x--;
        }
    }
    //da delivery row , spostamento in basso per raggiungere la riga pod +1 
    if( x==delivery_row &amp;&amp; y!=myTask.pod.y - 1){
        if(matrix[y+1][x].isRobotOn=false){
            matrix[y+1][x].isRobotOn=true;
            matrix[y][x].isRobotOn=false;
            y--;
        }
    }
    //da riga pod + 1  , spostamento a sx per raggiungere la colonna pod 
    if(y==myTask.pod.y - 1 &amp;&amp; x!=myTask.pod.x ){
        if(matrix[y][x-1].isRobotOn=false){
            matrix[y][x-1].isRobotOn=true;
            matrix[y][x].isRobotOn=false;
            x--;
        }
    }
    //da riga pod + 1  e colonna del pod, spostamento in basso per consegnare il pod
    if(y==myTask.pod.y - 1 &amp;&amp; x==myTask.pod.x ){
        if(matrix[y+1][x].isRobotOn=false){
            matrix[y+1][x].isRobotOn=true;
            matrix[y][x].isRobotOn=false;
            y++;
            arrived_back = true;
        }
    }
}

void next_step_to_reposition(){
    if(x!=1){
        if(matrix[y][x-1].isRobotOn=false){
            matrix[y][x-1].isRobotOn=true;
            matrix[y][x].isRobotOn=false;
            x--;
        }
    }
    if((x==1) &amp;&amp; (matrix[y][x-1].isRobotOn=false)){
            matrix[y][x-1].isRobotOn=true;
            matrix[y][x].isRobotOn=false;
            x--;
            repositioned=true;
    }
    else{
        if((y!=M-1) &amp;&amp; (matrix[y+1][x].isRobotOn=false)){
          matrix[y+1][x].isRobotOn=true;
          matrix[y][x].isRobotOn=false;
          y++;
        }
    }
}
</declaration>
		<location id="id2" x="-3068" y="-816">
			<name x="-3145" y="-850">waitingTask</name>
		</location>
		<location id="id3" x="-2720" y="-654">
			<name x="-2822" y="-654">getting_pod</name>
			<label kind="invariant" x="-2788" y="-671">t&lt;=K</label>
		</location>
		<location id="id4" x="-2363" y="-654">
			<name x="-2465" y="-629">reaching_delivery</name>
			<label kind="invariant" x="-2439" y="-612">t&lt;=K</label>
		</location>
		<location id="id5" x="-2533" y="-867">
			<name x="-2543" y="-901">waiting_release</name>
		</location>
		<location id="id6" x="-2677" y="-850">
			<name x="-2687" y="-884">returning_pod</name>
			<label kind="invariant" x="-2686" y="-901">t&lt;=K</label>
		</location>
		<location id="id7" x="-2363" y="-731">
			<name x="-2346" y="-739">waiting_human</name>
		</location>
		<location id="id8" x="-2966" y="-943">
			<name x="-2958" y="-969">repositioning</name>
			<label kind="invariant" x="-2958" y="-986">t&lt;=K &amp;&amp; repositioned==false</label>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id8"/>
			<target ref="id3"/>
			<label kind="guard" x="-3000" y="-858">queue_length &gt; 0</label>
			<label kind="synchronisation" x="-2915" y="-841">claim!</label>
			<label kind="assignment" x="-2966" y="-824">claimTask(), t=0</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="guard" x="-3204" y="-1020">t&gt;=K &amp;&amp; repositioned==false</label>
			<label kind="assignment" x="-3196" y="-1003">t=0, next_step_to_reposition()</label>
			<nail x="-2974" y="-1029"/>
			<nail x="-3025" y="-1020"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id2"/>
			<label kind="guard" x="-3128" y="-909">repositioned==true</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="guard" x="-2847" y="-935">arrived_back==true</label>
			<label kind="assignment" x="-2822" y="-918">freePod(), t=0</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-2439" y="-816">pick!</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id7"/>
			<label kind="guard" x="-2354" y="-697">arrived_delivery==true</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="guard" x="-2720" y="-773">t&gt;=K &amp;&amp; arrived_back==false</label>
			<label kind="assignment" x="-2711" y="-756">next_step_to_return(), t=0</label>
			<nail x="-2703" y="-799"/>
			<nail x="-2643" y="-773"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-2626" y="-850">release?</label>
			<label kind="assignment" x="-2618" y="-833">t=0</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="guard" x="-2235" y="-612">t&gt;=K &amp;&amp; arrived_delivery==false</label>
			<label kind="assignment" x="-2235" y="-595">next_step_to_delivery(), t=0</label>
			<nail x="-2235" y="-552"/>
			<nail x="-2252" y="-646"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-2643" y="-629">arrived_pod==true</label>
			<label kind="assignment" x="-2609" y="-646">t=0</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="-2746" y="-552">t&gt;=K &amp;&amp; arrived_pod==false</label>
			<label kind="assignment" x="-2745" y="-569">next_step_to_pod(), t=0</label>
			<nail x="-2746" y="-586"/>
			<nail x="-2669" y="-578"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-3026" y="-748">queue_length &gt; 0</label>
			<label kind="synchronisation" x="-3009" y="-714">claim!</label>
			<label kind="assignment" x="-3026" y="-731">claimTask(), t=0</label>
		</transition>
	</template>
	<template>
		<name>Human</name>
		<parameter>int H</parameter>
		<declaration>clock x;
</declaration>
		<location id="id9" x="-450" y="-204">
			<name x="-460" y="-238">idle</name>
		</location>
		<location id="id10" x="-365" y="-25">
			<name x="-373" y="-8">picking</name>
			<label kind="invariant" x="-374" y="9">x&lt;=H</label>
		</location>
		<location id="id11" x="-221" y="-93">
			<name x="-231" y="-127">done</name>
		</location>
		<init ref="id9"/>
		<transition>
			<source ref="id11"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-348" y="-178">release!</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="guard" x="-263" y="-68">x&gt;=H</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-450" y="-93">pick?</label>
			<label kind="assignment" x="-450" y="-110">x=0</label>
			<nail x="-442" y="-178"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
robot1 = Robot();
robot2 = Robot();
human = Human(1);
dispatcher = TaskDispatcher(5);
// List one or more processes to be composed into a system.
system robot1, robot2, dispatcher, human;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; dispatcher.Overflow</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
